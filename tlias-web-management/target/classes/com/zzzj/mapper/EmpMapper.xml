<!--定义Mapper映射文件的约束和基本结构-->
<!--在配置对应的Mapper映射文件时要求要同包同名，即Mapper XML文件与Mapper接口的包名和文件名必须一致-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzzj.mapper.EmpMapper">
<!-- namespace属性用于指定当前Mapper映射文件对应的Mapper接口的全限定名 -->
<!-- 它将EmpMapper.xml文件与com.zzzj.mapper.EmpMapper接口进行绑定 -->
<!-- 这样MyBatis就知道该映射文件是为哪个接口提供SQL映射的 -->
<!-- namespace="com.zzzj.mapper.EmpMapper" -->
    <select id="list" resultType="com.zzzj.pojo.Emp">
    <!-- resultType查询返回的单条记录所需要返回的类型-->
        select e.*, d.name deptName from emp as e left join dept as d on e.dept_id = d.id
        <where>
            <if test="name != null and name != ''">
                e.name like concat('%',#{name},'%')
            </if>
            <if test="gender != null">
                and e.gender = #{gender}
            </if>
            <if test="begin != null and end != null">
                and e.entry_date between #{begin} and #{end}
            </if>
        </where>
            order by e.update_time desc
        </select>
<!--    &lt;!&ndash; parameterType属性指定了传入参数的类型，这里表示传入的是一个Emp对象 &ndash;&gt;-->
    <insert id="inster" parameterType="com.zzzj.pojo.Emp">
        insert into emp(username, name, gender, phone, job, salary, image, entry_date, dept_id, create_time, update_time)
        values (#{username},#{name},#{gender},#{phone},#{job},#{salary},#{image},#{entryDate},#{deptId},#{createTime},#{updateTime})
    </insert>
</mapper>
<!-- concat函数用于字符串拼接，这里将'%'与参数#{name}进行拼接，实现模糊查询 -->
