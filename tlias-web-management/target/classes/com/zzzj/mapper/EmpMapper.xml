<!--定义Mapper映射文件的约束和基本结构-->
<!--在配置对应的Mapper映射文件时要求要同包同名，即Mapper XML文件与Mapper接口的包名和文件名必须一致-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zzzj.mapper.EmpMapper">
    <!--根据ID更新员工信息-->
    <update id="updateById">
        update emp
        <set>
#             set标签的作用是可以去掉掉多余的逗号
            <if test="username != null and username != ''">username = #{username},</if>
            <if test="password != null and password != ''">password = #{password},</if>
            <if test="name != null and name != ''">name = #{name},</if>
            <if test="gender != null">gender = #{gender},</if>
            <if test="phone != null and phone != ''">phone = #{phone},</if>
            <if test="job != null">job = #{job},</if>
            <if test="salary != null">salary = #{salary},</if>
            <if test="image != null and image != ''">image = #{image},</if>
            <if test="entryDate != null">entry_date = #{entryDate},</if>
            <if test="deptId != null">dept_id = #{deptId},</if>
            <if test="updateTime != null">update_time = #{updateTime},</if>
        </set>
        where id = #{id}
    </update>
    <!-- namespace属性用于指定当前Mapper映射文件对应的Mapper接口的全限定名 -->
<!-- 它将EmpMapper.xml文件与com.zzzj.mapper.EmpMapper接口进行绑定 -->
<!-- 这样MyBatis就知道该映射文件是为哪个接口提供SQL映射的 -->
<!-- namespace="com.zzzj.mapper.EmpMapper" -->
    <select id="list" resultType="com.zzzj.pojo.Emp">
    <!-- resultType查询返回的单条记录所需要返回的类型-->
        select e.*, d.name deptName from emp as e left join dept as d on e.dept_id = d.id
        <where>
            <if test="name != null and name != ''">
                e.name like concat('%',#{name},'%')
            </if>
            <if test="gender != null">
                and e.gender = #{gender}
            </if>
            <if test="begin != null and end != null">
                and e.entry_date between #{begin} and #{end}
            </if>
        </where>
            order by e.update_time desc
        </select>
    <!--自定义结果集ResultMap-->
    <resultMap id="empResultMap" type="com.zzzj.pojo.Emp">
        <id column="id" property="id" />
        <result column="username" property="username" />
        <result column="password" property="password" />
        <result column="name" property="name" />
        <result column="gender" property="gender" />
        <result column="phone" property="phone" />
        <result column="job" property="job" />
        <result column="salary" property="salary" />
        <result column="image" property="image" />
        <result column="entry_date" property="entryDate" />
        <result column="dept_id" property="deptId" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />

        <!--封装exprList-->
        <collection property="exprList" ofType="com.zzzj.pojo.EmpExpr">
            <id column="ee_id" property="id"/>
            <result column="ee_company" property="company"/>
            <result column="ee_job" property="job"/>
            <result column="ee_begin" property="begin"/>
            <result column="ee_end" property="end"/>
            <result column="ee_emp_id" property="empId"/>
        </collection>
    </resultMap>

    <!--根据ID查询员工的详细信息-->
    <select id="getById" resultMap="empResultMap">
        select e.*,
               ee.id ee_id,
               ee.emp_id ee_emp_id,
               ee.begin ee_begin,
               ee.end ee_end,
               ee.company ee_company,
               ee.job ee_job
        from emp e left join emp_expr ee on e.id = ee.emp_id
        where e.id = #{id}
    </select>
    <!--    统计职位人数-->
    <select id="countEmpJobData" resultType="java.util.Map">
        select
            (case job when 1 then '班主任'
                      when 2 then '讲师'
                      when 3 then '学工主管'
                      when 4 then '教研主管'
                      when 5 then '咨询师'
                      else '其他' end)  pos,
            count(*) total
        from emp group by job
        order by total
    </select>
    <!--    统计员工性别人数-->
    <select id="countEmpGenderData" resultType="java.util.Map">
        select
            if(gender = 1, '男', '女') name ,
            count(*) value
        from emp
        group by gender;
    </select>

    <!--    &lt;!&ndash; parameterType属性指定了传入参数的类型，这里表示传入的是一个Emp对象 &ndash;&gt;-->
<!--    <insert id="insert" parameterType="com.zzzj.pojo.Emp">-->
<!--        insert into emp(username, name, gender, phone, job, salary, image, entry_date, dept_id, create_time, update_time)-->
<!--        values (#{username},#{name},#{gender},#{phone},#{job},#{salary},#{image},#{entryDate},#{deptId},#{createTime},#{updateTime})-->
<!--    </insert>-->
<!--    批量删除员工-->
    <delete id="deleteByIds">
        delete from emp where id in
        <foreach item="id" collection="ids" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>
</mapper>
<!-- concat函数用于字符串拼接，这里将'%'与参数#{name}进行拼接，实现模糊查询 -->